AWSTemplateFormatVersion: "2010-09-09"
Description: "Deploy Two EC2 Into Parameter Subnets"

Parameters: 
  VpcId:
    Description: "VPC ID"
    Type: AWS::EC2::VPC::Id
  PublicSubnetId:
    Description: "Public Subnet Id"
    Type: AWS::EC2::Subnet::Id

  PrivateSubnetId:
    Description: "Private Subnet Id"
    Type: AWS::EC2::Subnet::Id

  InstanceType:
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.micro
      - t2.small
      - t3.micro
      - t3.small
    Description: EC2 instance type

  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance


Mappings:
  RegionMap:
    us-east-1:
      AMI: ami-0c2b8ca1dad447f8a
    us-west-1:
      AMI: ami-0b2f6494ff0b07a0e
    us-west-2:
      AMI: ami-08962a4068733a2b6
    eu-west-1:
      AMI: ami-047bb4163c506cd98

Resources: 

  PublicSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: PublicSecurityGroup
      GroupDescription: Allowing TCP traffic from anywhere on port 80 and 22
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          FromPort: 0
          ToPort: 0
          CidrIp: 0.0.0.0/0

  PrivateSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: PrivateSecurityGroup
      GroupDescription: Private Security Group only allowing traffic from Public
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref PublicSG
      SecurityGroupEgress:
        - IpProtocol: -1
          FromPort: 0
          ToPort: 0
          CidrIp: 0.0.0.0/0

  PublicEC2:
    Type: AWS::EC2::Instance
    Properties:
      KeyName: !Ref KeyName
      DisableApiTermination: false
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", AMI]
      InstanceType: !Ref InstanceType
      SubnetId: !Ref PublicSubnetId
      SecurityGroupIds:
        - !Ref PublicSG

  PrivateEC2:
    Type: AWS::EC2::Instance
    Properties:
      KeyName: !Ref KeyName
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", AMI]
      InstanceType: !Ref InstanceType
      SubnetId: !Ref PrivateSubnetId
      SecurityGroupIds:
        - !Ref PrivateSG

Outputs:
  PublicEC2ID:
    Description: "Id of the Public Server"
    Value: !Ref PublicEC2

  PrivateEC2ID:
    Description: "Id of the Private Server"
    Value: !Ref PrivateEC2

  